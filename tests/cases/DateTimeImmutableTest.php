<?php

declare(strict_types=1);

namespace Tests\Unit;

use Noxem\DateTime\DateTimeImmutable as DateTime;
use Noxem\DateTime\Exception\BadFormatException;
use Tester\Assert;
use Tests\Fixtures\TestCase\AbstractTestCase;

require_once __DIR__ . '/../bootstrap.php';


/**
 * @testCase
 */
class DateTimeImmutableTest extends AbstractTestCase
{
	public function setUp()
	{
		parent::setUp(); // TODO: Change the autogenerated stub
		date_default_timezone_set('Europe/Prague');
	}

	public function testCreate()
	{
		Assert::same(1654077600, DateTime::create(1654077600)->getTimestamp());
		Assert::same(1654077600, DateTime::create('1654077600')->getTimestamp());

		Assert::same(1654077600, DateTime::create('2022-06-01 12:00:00')->getTimestamp());
		Assert::same(time(), DateTime::create('now')->getTimestamp());
		Assert::same( time(), DateTime::create()->getTimestamp());

		Assert::type(DateTime::class, DateTime::create());

		Assert::exception(
			fn() => DateTime::create('foo foo Baz'),
			BadFormatException::class
		);
	}

	public function testDifference()
	{
		Assert::same(59,
			DateTime::create('2022-07-20 15:44:30')
				->difference( DateTime::create('2022-07-20 15:45:29') )
				->seconds()
		);

		Assert::same(3.0,
			DateTime::create('2022-07-20 15:44:30')
				->difference( DateTime::create('2022-07-20 15:47:30') )
				->minutes()
		);

		Assert::true(
			DateTime::create('2022-07-20 15:44:30')
				->difference( DateTime::create('2022-07-20 15:47:30') )
				->isValid()
		);
	}

	public function testIsFuture()
	{
		Assert::true( DateTime::create('now')->modify('+1 year')->isFuture() );
		Assert::true( DateTime::create('now')->modify('+1 seconds')->isFuture() );
		Assert::false( DateTime::create('now')->isFuture() );
	}

	public function testToString()
	{
		Assert::same('2022-07-20 13:42:57', (string)DateTime::create('2022-07-20 13:42:57') );
	}

	public function testAreSame()
	{
		Assert::true(
			DateTime::create('2022-07-20 01:00:00')
				->areSame( DateTime::create('2022-07-20 01:00:00') )
		);

		Assert::true(
			DateTime::create('2022-07-20 01:00:00')
				->setTimezone(new \DateTimeZone('Europe/Prague'))
				->areSame( DateTime::create('2022-07-20 01:00:00')->setTimezone(new \DateTimeZone('Europe/Prague')) )
		);

		Assert::false(
			DateTime::create('2022-07-20 01:00:00')
				->setTimezone(new \DateTimeZone('Europe/Prague'))
				->areSame( DateTime::create('2022-07-20 01:00:00')
					->setTimezone(new \DateTimeZone('America/New_York')) )
		);

		Assert::false(
			DateTime::create('2022-07-20 01:00:00')
				->areSame( DateTime::create('2022-07-20 01:00:00')
					->setTimezone(new \DateTimeZone('America/New_York')) )
		);
	}

	/*
	 * EXAMPLE												|███████████|
	 *
	 * AFTER										██████	|			|									FALSE
	 * START TOUCHING								 ███████|			|									FALSE
	 * START INSIDE										████|██			|									TRUE
	 * INSIDE START TOUCHING								|███████████|███████							TRUE
	 * ENCLOSING START TOUCHING								|██████		|									TRUE
	 * ENCLOSING											|	█████	|									TRUE
	 * ENCLOSING END TOUCHING								|	    ████|									TRUE
	 * EXACT MATCH											|███████████|									TRUE
	 * INSIDE											████|███████████|██████								TRUE
	 * INSIDE END TOUCHING								████|███████████|									TRUE
	 * END INSIDE											|		████|█████████████						TRUE
	 * END TOUCHING											|			|████████							FALSE
	 * BEFORE												|			|	███████████						FALSE
	 *
	 */
	public function testIsOverlap()
	{
		# AFTER
		Assert::false(
			DateTime::isOverlap(
				DateTime::create('2021-05-06 09:00:00'),
				DateTime::create('2021-05-06 09:59:59'),
				DateTime::create('2021-05-06 10:00:00'),
				DateTime::create('2021-05-06 13:00:00')
			)
		);

		# START TOUCHING
		Assert::false(
			DateTime::isOverlap(
				DateTime::create('2021-05-06 09:00:00'),
				DateTime::create('2021-05-06 10:00:00'),
				DateTime::create('2021-05-06 10:00:00'),
				DateTime::create('2021-05-06 13:00:00')
			)
		);

		# START INSIDE
		Assert::true(
			DateTime::isOverlap(
				DateTime::create('2021-05-06 09:00:00'),
				DateTime::create('2021-05-06 12:00:00'),
				DateTime::create('2021-05-06 10:00:00'),
				DateTime::create('2021-05-06 13:00:00')
			)
		);

		# INSIDE START TOUCHING
		Assert::true(
			DateTime::isOverlap(
				DateTime::create('2021-05-06 10:00:00'),
				DateTime::create('2021-05-06 15:00:00'),
				DateTime::create('2021-05-06 10:00:00'),
				DateTime::create('2021-05-06 13:00:00')
			)
		);

		# ENCLOSING START TOUCHING
		Assert::true(
			DateTime::isOverlap(
				DateTime::create('2021-05-06 10:00:00'),
				DateTime::create('2021-05-06 12:00:00'),
				DateTime::create('2021-05-06 10:00:00'),
				DateTime::create('2021-05-06 13:00:00')
			)
		);

		# ENCLOSING
		Assert::true(
			DateTime::isOverlap(
				DateTime::create('2021-05-06 11:00:00'),
				DateTime::create('2021-05-06 12:00:00'),
				DateTime::create('2021-05-06 10:00:00'),
				DateTime::create('2021-05-06 13:00:00')
			)
		);

		# ENCLOSING END TOUCHING
		Assert::true(
			DateTime::isOverlap(
				DateTime::create('2021-05-06 11:00:00'),
				DateTime::create('2021-05-06 13:00:00'),
				DateTime::create('2021-05-06 10:00:00'),
				DateTime::create('2021-05-06 13:00:00')
			)
		);

		# EXACT MATCH
		Assert::true(
			DateTime::isOverlap(
				DateTime::create('2021-05-06 10:00:00'),
				DateTime::create('2021-05-06 13:00:00'),
				DateTime::create('2021-05-06 10:00:00'),
				DateTime::create('2021-05-06 13:00:00')
			)
		);

		# INSIDE
		Assert::true(
			DateTime::isOverlap(
				DateTime::create('2021-05-06 09:00:00'),
				DateTime::create('2021-05-06 14:00:00'),
				DateTime::create('2021-05-06 10:00:00'),
				DateTime::create('2021-05-06 13:00:00')
			)
		);

		# INSIDE END TOUCHING
		Assert::true(
			DateTime::isOverlap(
				DateTime::create('2021-05-06 09:00:00'),
				DateTime::create('2021-05-06 13:00:00'),
				DateTime::create('2021-05-06 10:00:00'),
				DateTime::create('2021-05-06 13:00:00')
			)
		);

		# END INSIDE
		Assert::true(
			DateTime::isOverlap(
				DateTime::create('2021-05-06 11:00:00'),
				DateTime::create('2021-05-06 14:00:00'),
				DateTime::create('2021-05-06 10:00:00'),
				DateTime::create('2021-05-06 13:00:00')
			)
		);

		# END TOUCHING
		Assert::false(
			DateTime::isOverlap(
				DateTime::create('2021-05-06 13:00:00'),
				DateTime::create('2021-05-06 14:00:00'),
				DateTime::create('2021-05-06 10:00:00'),
				DateTime::create('2021-05-06 13:00:00')
			)
		);

		# BEFORE
		Assert::false(
			DateTime::isOverlap(
				DateTime::create('2021-05-06 13:00:01'),
				DateTime::create('2021-05-06 14:00:00'),
				DateTime::create('2021-05-06 10:00:00'),
				DateTime::create('2021-05-06 13:00:00')
			)
		);
	}

}

$test = new DateTimeImmutableTest();
$test->run();