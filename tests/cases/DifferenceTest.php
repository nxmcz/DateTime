<?php

declare(strict_types=1);

namespace Tests\Unit;

use Noxem\DateTime\DT;
use Noxem\DateTime\DT as DateTime;
use Noxem\DateTime\Difference;
use Tester\Assert;
use Tests\Fixtures\TestCase\AbstractTestCase;

require_once __DIR__ . '/../bootstrap.php';


/**
 * @testCase
 */
class DifferenceTest extends AbstractTestCase
{
	public function setUp()
	{
		parent::setUp(); // TODO: Change the autogenerated stub
	}

	public function testValid()
	{
		$difference = new Difference(
			$start = DateTime::create('2019-08-01 20:55:59'),
			$end = DateTime::create('2019-08-02 20:55:59')
		);

		Assert::same($start, $difference->getStart());

		Assert::same(1564685759000, $difference->getStart()->getMillis());
		Assert::same(1564772159000, $difference->getEnd()->getMillis());

		Assert::same($end, $difference->getEnd());
		Assert::type(\DateInterval::class, $difference->getInterval());
		Assert::same($end, $difference->getEnd());

		Assert::same(86400000, $difference->getMillis());
		Assert::same(86400, $difference->getSeconds());
		Assert::same(1440.0, $difference->getMinutes());
		Assert::same(24.0, $difference->getHours());

		Assert::false($difference->isActive());

		$live = new Difference(
			DateTime::create('now')->modify("-9 minutes"),
			DateTime::create()->modify("+10 minutes")
		);

		Assert::true($live->isActive());
		Assert::same(540, $live->intervalToNow());
		Assert::same(600, $live->intervalToEnd());
	}

	public function testInvalid()
	{
		Assert::exception(
			fn() => new Difference(
				DateTime::create('2019-08-01 20:55:59'),
				DateTime::create('2019-08-01 20:55:59')->modify("-1 seconds"),
				TRUE
			),
			\InvalidArgumentException::class
		);
	}

	/**
	 * @dataProvider providerWeeks
	 */
	public function testWeeks(int $number, string $a, string $b): void
	{
		$first = DT::create($a);

		Assert::same(
			$number,
			$first
				->difference(DT::create($b))
				->solidWeeks()
		);
	}

	public function providerWeeks(): array
	{
		return [
			[2, '2021/07/07', '2021/07/21'],
			[3, '2021/07/05', '2021/07/26'],
			[3, '2021/07/05', '2021/07/29'],
			[-3, '2021/07/26', '2021/07/05'],
			[1, '2021/06/28', '2021/07/05'],
			[0, '2021/06/28', '2021/06/28'],
			[0, '2021/06/21', '2021/06/27'],
			[0, '2021/06/23', '2021/06/24'],
			[1, '2021/06/20', '2021/06/21'],
			[-1, '2020/12/29', '2021/01/05'],
			[-1, '2020/12/31', '2021/01/05'],
			[-2, '2020/12/23', '2021/01/05'],
			[-3, '2020/12/19', '2021/01/05'],
			[-1, '2020/12/29 22:00', '2021/01/04 00:00'],
			[-2, '2020/12/24 22:00', '2021/01/04 00:00'],
			[-2, '2020/12/24 00:00', '2021/01/04 00:00'],
			[-2, '2020/12/24 03:00', '2021/01/04 05:00'],

			[1, '2022/08/19 03:00', '2022/08/22 05:00'],
			[1, '2022/08/19 03:00', '2022/08/26 03:00'],
			[1, '2022/08/15 03:00', '2022/08/28 23:59:59'],

			[0, '2021/01/02', '2021/01/03'],
			[0, '2020/12/29', '2021/01/03'],
			[1, '2021/12/22', '2021/12/29'],
			[1, '2021/12/22', '2022/01/01'],
			[1, '2021/12/22', '2022/01/02'],
			[51, '2021/01/05', '2021/12/29'],
			[51, '2021/01/05', '2022/01/02'],

			[139, '2019/05/05', '2022/01/02'],
			[-139, '2022/01/02', '2019/05/05'],
			[139, '2019/05/05', '2022/01/02'],
			[-139, '2022/01/02', '2019/05/05'],
		];
	}

	/**
	 * @dataProvider providerDays
	 */
	public function testDays(int $number, string $a, string $b): void
	{
		Assert::same(
			$number,
			DT::create($a)
				->difference(DT::create($b))
				->days()
		);
	}

	public function providerDays(): array
	{
		return [
			[0, '2021/03/15', '2021/03/15'],
			[1, '2021/03/15', '2021/03/16'],
			[2, '2021/03/15', '2021/03/17'],
			[3, '2021/03/15', '2021/03/18'],
			[4, '2021/03/15', '2021/03/19'],
			[5, '2021/03/15', '2021/03/20'],
			[6, '2021/03/15', '2021/03/21'],
			[10, '2021/03/15', '2021/03/25'],
			[-4, '2021/03/19', '2021/03/15'],
			[-1, '2021/03/16', '2021/03/15'],
			[365, '2021/03/16', '2022/03/16'],
			[366, '2019/03/16', '2020/03/16'], // leap year
			[-366, '2020/03/16', '2019/03/16'], // leap year
		];
	}

	public function testFromReadme(): void
	{
		$bigger = DT::create('2022-05-20 11:45:00');
		$smaller = DT::create('2022-05-13 11:45:00');

		$dt = $smaller->difference($bigger);
		Assert::same(168.0, $dt->getHours());
		Assert::same(7, $dt->days());
		Assert::same(1, $dt->solidWeeks());
		Assert::same(10080.0, $dt->getMinutes());
		Assert::same(604800000, $dt->getMillis());

		$dt = $bigger->difference($smaller);
		Assert::same(-168.0, $dt->getHours());
		Assert::same(-7, $dt->days());
		Assert::same(-1, $dt->solidWeeks());
		Assert::same(-10080.0, $dt->getMinutes());
		Assert::same(-604800000, $dt->getMillis());
	}

	public function testWithAbsolute(): void
	{
		$first = DT::create('2022-05-20 11:45:00');
		$last = DT::create('2022-05-13 11:45:00');

		$dt = $first->difference($last);

		Assert::same(-168.0, $dt->getHours());
		Assert::same(-7, $dt->days());
		Assert::same(-1, $dt->solidWeeks());
		Assert::same(-10080.0, $dt->getMinutes());
		Assert::same(-604800000, $dt->getMillis());

		$abs = $dt->withAbsolute();
		Assert::same(168.0, $abs->getHours());
		Assert::same(7, $abs->days());
		Assert::same(1, $abs->solidWeeks());
		Assert::same(10080.0, $abs->getMinutes());
		Assert::same(604800000, $abs->getMillis());

		Assert::same(-168.0, $dt->getHours());
		Assert::same(-7, $dt->days());
		Assert::same(-1, $dt->solidWeeks());
		Assert::same(-10080.0, $dt->getMinutes());
		Assert::same(-604800000, $dt->getMillis());
	}

}

$test = new DifferenceTest();
$test->run();